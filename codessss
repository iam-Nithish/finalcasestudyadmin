////databse

use Myntra

CREATE TABLE Products (
    ProductID INT PRIMARY KEY IDENTITY,
    ProductName NVARCHAR(100),
    ProductPrice DECIMAL(18, 2),
    ProductDescription NVARCHAR(500),
    ProductImage NVARCHAR(200)
);


select *from Products

///controllers

//admin controller

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using WebApplication1.Models;

namespace WebApplication1.Controllers
{
    public class AdminController : Controller
    {
        // GET: Admin
       public ActionResult Index()
{
    using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MyntraSqlConnection"].ConnectionString))
    {
        string query = "SELECT * FROM Products";
        SqlCommand cmd = new SqlCommand(query, conn);
        conn.Open();
        SqlDataReader reader = cmd.ExecuteReader();

        List<Product> products = new List<Product>();
        while (reader.Read())
        {
            products.Add(new Product
            {
                ProductId = Convert.ToInt32(reader["ProductId"]),
                ProductName = reader["ProductName"].ToString(),
                ProductPrice = Convert.ToDecimal(reader["ProductPrice"]),
                ProductDescription = reader["ProductDescription"].ToString(),
                ProductImage = reader["ProductImage"].ToString()
            });
        }
        conn.Close();
        return View(products);
    }
}


        public ActionResult Create()
        {
            return View();
        }

        [HttpPost]





        public ActionResult Create(Product product, HttpPostedFileBase file)
        {
            if (file != null && file.ContentLength > 0)
            {
                string path = Path.Combine(Server.MapPath("~/Images/"), Path.GetFileName(file.FileName));
                file.SaveAs(path);
                product.ProductImage = "~/Images/" + file.FileName;
            }

            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MyntraSqlConnection"].ConnectionString))
            {
                string query = "INSERT INTO Products (ProductName, ProductPrice, ProductDescription, ProductImage) VALUES (@Name, @Price, @Desc, @Image)";
                SqlCommand cmd = new SqlCommand(query, conn);
                cmd.Parameters.AddWithValue("@Name", product.ProductName);
                cmd.Parameters.AddWithValue("@Price", product.ProductPrice);
                cmd.Parameters.AddWithValue("@Desc", product.ProductDescription);
                cmd.Parameters.AddWithValue("@Image", product.ProductImage);

                conn.Open();
                cmd.ExecuteNonQuery();
                conn.Close();
            }


            return RedirectToAction("Index");
        }
       
        
        [HttpGet]
        public ActionResult Edit(int id)
        {
            Product product = null;

            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MyntraSqlConnection"].ConnectionString))
            {
                string query = "SELECT * FROM Products WHERE ProductId = @Id";
                SqlCommand cmd = new SqlCommand(query, conn);
                cmd.Parameters.AddWithValue("@Id", id);

                conn.Open();
                SqlDataReader reader = cmd.ExecuteReader();
                if (reader.Read())
                {
                    product = new Product
                    {
                        ProductId = Convert.ToInt32(reader["ProductId"]),
                        ProductName = reader["ProductName"].ToString(),
                        ProductPrice = Convert.ToDecimal(reader["ProductPrice"]),
                        ProductDescription = reader["ProductDescription"].ToString(),
                        ProductImage = reader["ProductImage"].ToString()
                    };
                }
                conn.Close();
            }

            return View(product);
        }
       
        [HttpPost]
        public ActionResult Edit(Product product, HttpPostedFileBase file)
        {
            if (file != null && file.ContentLength > 0)
            {
                string path = Path.Combine(Server.MapPath("/Images/"), Path.GetFileName(file.FileName));
                file.SaveAs(path);
                product.ProductImage = "~/Images/" + file.FileName;
            }

            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MyntraSqlConnection"].ConnectionString))
            {
                string query = "UPDATE Products SET ProductName = @Name, ProductPrice = @Price, ProductDescription = @Desc, ProductImage = @Image WHERE ProductId = @Id";
                SqlCommand cmd = new SqlCommand(query, conn);
                cmd.Parameters.AddWithValue("@Name", product.ProductName);
                cmd.Parameters.AddWithValue("@Price", product.ProductPrice);
                cmd.Parameters.AddWithValue("@Desc", product.ProductDescription);
                cmd.Parameters.AddWithValue("@Image", product.ProductImage);
                cmd.Parameters.AddWithValue("@Id", product.ProductId);

                conn.Open();
                cmd.ExecuteNonQuery();
                conn.Close();
            }

            return RedirectToAction("Index");
        }


        [HttpGet]

        public ActionResult Delete(int id)
        {
            Product product = null;

            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MyntraSqlConnection"].ConnectionString))
            {
                string query = "SELECT * FROM Products WHERE ProductId = @Id";
                SqlCommand cmd = new SqlCommand(query, conn);
                cmd.Parameters.AddWithValue("@Id", id);

                conn.Open();
                SqlDataReader reader = cmd.ExecuteReader();
                if (reader.Read())
                {
                    product = new Product
                    {
                        ProductId = Convert.ToInt32(reader["ProductId"]),
                        ProductName = reader["ProductName"].ToString(),
                        ProductPrice = Convert.ToDecimal(reader["ProductPrice"]),
                        ProductDescription = reader["ProductDescription"].ToString(),
                        ProductImage = reader["ProductImage"].ToString()
                    };
                }
                conn.Close();
            }

            return View(product);
        }

        [HttpPost, ActionName("Delete")]
        public ActionResult DeleteConfirmed(int id)
        {
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MyntraSqlConnection"].ConnectionString))
            {
                string query = "DELETE FROM Products WHERE ProductId = @Id";
                SqlCommand cmd = new SqlCommand(query, conn);
                cmd.Parameters.AddWithValue("@Id", id);

                conn.Open();
                cmd.ExecuteNonQuery();
                conn.Close();
            }

            return RedirectToAction("Index");
        }
      
            // Details action method to fetch and display product details
            public ActionResult Details(int id)
            {
                Product product = null;

                using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MyntraSqlConnection"].ConnectionString))
                {
                    string query = "SELECT * FROM Products WHERE ProductId = @Id";
                    SqlCommand cmd = new SqlCommand(query, conn);
                    cmd.Parameters.AddWithValue("@Id", id);

                    conn.Open();
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.Read())
                    {
                        product = new Product
                        {
                            ProductId = Convert.ToInt32(reader["ProductId"]),
                            ProductName = reader["ProductName"].ToString(),
                            ProductPrice = Convert.ToDecimal(reader["ProductPrice"]),
                            ProductDescription = reader["ProductDescription"].ToString(),
                            ProductImage = reader["ProductImage"].ToString()
                        };
                    }
                    conn.Close();
                }

                if (product == null)
                {
                    // If product is null, return an error page or redirect
                    return HttpNotFound();
                }

                return View(product); // Pass the product object to the view
            }
        




    }
}


////views

//create

@model WebApplication1.Models.Product

@{
    ViewBag.Title = "Create";
}

@using (Html.BeginForm("Create", "Admin", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    <div class="form-group">
        @Html.LabelFor(model => model.ProductName)
        @Html.TextBoxFor(model => model.ProductName, new { @class = "form-control" })
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.ProductPrice)
        @Html.TextBoxFor(model => model.ProductPrice, new { @class = "form-control" })
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.ProductDescription)
        @Html.TextAreaFor(model => model.ProductDescription, new { @class = "form-control" })
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.ProductImage)
        <input type="file" name="file" />
    </div>
    <input type="submit" value="Create" class="btn btn-primary" />
}



//delate


@model WebApplication1.Models.Product

@{
    ViewBag.Title = "Delete";
}

<h2>Are you sure you want to delete this product?</h2>

<div>
    <h3>@Model.ProductName</h3>
    <p>Price: @Model.ProductPrice</p>
    <p>Description: @Model.ProductDescription</p>
    <p>
        <img src="@Model.ProductImage" alt="@Model.ProductName" width="200" />
    </p>
</div>

@using (Html.BeginForm())
{
<input type="submit" value="Delete" class="btn btn-danger" />
 
@Html.ActionLink("Back to List", "Index")
}

//details

@model WebApplication1.Models.Product

<h3>@Model.ProductName</h3>
<p>Price: @Model.ProductPrice</p>
<p>Description: @Model.ProductDescription</p>

@if (!string.IsNullOrEmpty(Model.ProductImage))
{
    <img src="@Url.Content(Model.ProductImage)" alt="@Model.ProductName" style="width:200px;height:200px;" />
}
else
{
    <p>No image available</p>
}


//edit



@model WebApplication1.Models.Product

@{
    ViewBag.Title = "Edit";
}

<h2>Edit Product</h2>

@using (Html.BeginForm("Edit", "Admin", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.HiddenFor(model => model.ProductId)

    <div class="form-group">
        @Html.LabelFor(model => model.ProductName)
        @Html.TextBoxFor(model => model.ProductName, new { @class = "form-control" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ProductPrice)
        @Html.TextBoxFor(model => model.ProductPrice, new { @class = "form-control" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ProductDescription)
        @Html.TextAreaFor(model => model.ProductDescription, new { @class = "form-control" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ProductImage)
        <input type="file" name="file" />
    </div>

    <input type="submit" value="Save" class="btn btn-primary" />
}


//index

@model IEnumerable<WebApplication1.Models.Product>
@{
    ViewBag.Title = "Index";
}





<table class="table">
    <thead>
        <tr>
            <th>Product Name</th>
            <th>Product Price</th>
            <th>Product Description</th>
            <th>Product Image</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@item.ProductName</td>
                <td>@item.ProductPrice</td>
                <td>@item.ProductDescription</td>
                <td><img src="@Url.Content(item.ProductImage)" alt="@item.ProductName" width="100" /></td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.ProductId }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.ProductId }) |
                    @Html.ActionLink("Details", "Details", new { id = item.ProductId })
                </td>
            </tr>
        }
    </tbody>
</table>

<p>
    @Html.ActionLink("Create New Product", "Create")
</p>


//////user controller


using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.SqlClient;
using System.Web.Mvc;
using WebApplication1.Models; // Update this to match your project's namespace

public class UserController : Controller
{
    // GET: User Dashboard
    public ActionResult Index()
    {
        List<Product> products = new List<Product>();

        using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MyntraSqlConnection"].ConnectionString))
        {
            string query = "SELECT * FROM Products";
            SqlCommand cmd = new SqlCommand(query, conn);

            conn.Open();
            SqlDataReader reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                Product product = new Product
                {
                    ProductId = Convert.ToInt32(reader["ProductId"]),
                    ProductName = reader["ProductName"].ToString(),
                    ProductPrice = Convert.ToDecimal(reader["ProductPrice"]),
                    ProductDescription = reader["ProductDescription"].ToString(),
                    ProductImage = reader["ProductImage"].ToString()
                };
                products.Add(product);
            }
            conn.Close();
        }

        return View(products); // Pass the list of products to the view
    }

    // Details action method to fetch and display product details
    public ActionResult Details(int id)
    {
        Product product = null;

        using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MyntraSqlConnection"].ConnectionString))
        {
            string query = "SELECT * FROM Products WHERE ProductId = @Id";
            SqlCommand cmd = new SqlCommand(query, conn);
            cmd.Parameters.AddWithValue("@Id", id);

            conn.Open();
            SqlDataReader reader = cmd.ExecuteReader();
            if (reader.Read())
            {
                product = new Product
                {
                    ProductId = Convert.ToInt32(reader["ProductId"]),
                    ProductName = reader["ProductName"].ToString(),
                    ProductPrice = Convert.ToDecimal(reader["ProductPrice"]),
                    ProductDescription = reader["ProductDescription"].ToString(),
                    ProductImage = reader["ProductImage"].ToString()
                };
            }
            conn.Close();
        }

        if (product == null)
        {
            // If product is null, return an error page or redirect
            return HttpNotFound();
        }

        return View(product); // Pass the product object to the view
    }
}


//user views


//details

@model WebApplication1.Models.Product
@{
    ViewBag.Title = "Details";
}





<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <title>@ViewBag.Title</title>
    <style>
        .product-image {
            width: 100%;
            height: auto;
            max-height: 300px;
            object-fit: cover;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <h1>@Model.ProductName</h1>
        <img src="@Url.Content(Model.ProductImage)" alt="@Model.ProductName" class="product-image" />
        <p class="price">Price: Rs. @Model.ProductPrice</p>
        <p>Description: @Model.ProductDescription</p>
        <a href="@Url.Action("Index", "User")" class="btn btn-primary">Back to Product List</a>
    </div>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/2.9.3/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>



////Index

@model IEnumerable<WebApplication1.Models.Product>

@{
    ViewBag.Title = "Index";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <title>User Dashboard</title>
    <link href="~/Content/components/StyleSheet1.css" rel="stylesheet" />
    <style>
        .product-card {
            margin-bottom: 30px; /* Space between product cards */
            border: 1px solid #ddd; /* Optional: add a border for better visibility */
            padding: 15px; /* Optional: add padding for better layout */
            border-radius: 5px; /* Optional: add rounded corners */
        }

        .wishlist-btn {
            font-size: 14px; /* Smaller font size for the heart */
            cursor: pointer;
            margin-top: 10px; /* Space above the wishlist button */
        }

            .wishlist-btn .heart-icon {
                font-size: 18px; /* Smaller heart icon */
            }
    </style>
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <div class="col-md-2 filter-sidebar">
                <h4 class="filter-title">Color</h4>
                <div>
                    <input type="checkbox" class="filter-checkbox" id="black" />
                    <label for="black">Black</label>
                    <span>(25466)</span>
                </div>
                <div>
                    <input type="checkbox" class="filter-checkbox" id="blue" />
                    <label for="blue">Blue</label>
                    <span>(19997)</span>
                </div>
                <div>
                    <input type="checkbox" class="filter-checkbox" id="white" />
                    <label for="white">White</label>
                    <span>(19041)</span>
                </div>
                <div>
                    <input type="checkbox" class="filter-checkbox" id="green" />
                    <label for="green">Green</label>
                    <span>(13400)</span>
                </div>
                <div>
                    <input type="checkbox" class="filter-checkbox" id="red" />
                    <label for="red">Red</label>
                    <span>(7000)</span>
                </div>

                <h4 class="filter-title mt-4">Brands</h4>
                <div>
                    <input type="checkbox" class="filter-checkbox" id="brand1" />
                    <label for="brand1">Brand A</label>
                </div>
                <div>
                    <input type="checkbox" class="filter-checkbox" id="brand2" />
                    <label for="brand2">Brand B</label>
                </div>
                <div>
                    <input type="checkbox" class="filter-checkbox" id="brand3" />
                    <label for="brand3">Brand C</label>
                </div>

                <h4 class="filter-title mt-4">Categories</h4>
                <div>
                    <input type="checkbox" class="filter-checkbox" id="category1" />
                    <label for="category1">Electronics</label>
                </div>
                <div>
                    <input type="checkbox" class="filter-checkbox" id="category2" />
                    <label for="category2">Clothing</label>
                </div>
                <div>
                    <input type="checkbox" class="filter-checkbox" id="category3" />
                    <label for="category3">Home Appliances</label>
                </div>

                <h4 class="filter-title mt-4">Price Range</h4>
                <input type="range" min="0" max="10000" value="5000" id="priceRange" class="form-control" />
                <label for="priceRange">Price: ₹0 - ₹10,000</label>

                <h4 class="filter-title mt-4">Discount Range</h4>
                <div>
                    <input type="radio" name="discount" id="ten-percent" />
                    <label for="ten-percent">10% and above</label>
                </div>
                <div>
                    <input type="radio" name="discount" id="twenty-percent" />
                    <label for="twenty-percent">20% and above</label>
                </div>
                <div>
                    <input type="radio" name="discount" id="thirty-percent" />
                    <label for="thirty-percent">30% and above</label>
                </div>
            </div>

            <!-- Product Cards -->
            <div class="col-md-10">
                <div class="row">
                    @foreach (var product in Model)
                    {
                        <div class="col-md-4">
                            <div class="product-card">
                                <img src="@Url.Content(product.ProductImage)" alt="@product.ProductName" class="product-image" />
                                <h5>@product.ProductName</h5>
                                <p class="price">Rs. @product.ProductPrice</p>
                                <p class="discount">Rs. <del>@((product.ProductPrice ?? 0) * (decimal)1.2)</del> (50% OFF)</p>
                                <p class="description">@product.ProductDescription</p>
                                <div class="rating">
                                    <span class="star-rating">⭐️⭐️⭐️⭐️⭐️</span>
                                    <span class="review-count">(14.7k)</span>
                                </div>
                                <p class="wishlist-btn" title="Add to Wishlist">
                                    <span class="heart-icon">❤️</span> Add to Wishlist
                                </p>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/2.11.6/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>

////web config

	<connectionStrings>
		<!-- Existing Entity Framework Connection String -->
		<add name="MyntraEntities"
			 connectionString="metadata=res://*/Models.Model1.csdl|res://*/Models.Model1.ssdl|res://*/Models.Model1.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source=LAPTOP-KQJ2FQO2\SQLEXPRESS;initial catalog=Myntra;integrated security=True;trustservercertificate=True;MultipleActiveResultSets=True;App=EntityFramework&quot;"
			 providerName="System.Data.EntityClient" />

		<!-- New ADO.NET Connection String for SqlConnection -->
		<add name="MyntraSqlConnection"
			 connectionString="Data Source=LAPTOP-KQJ2FQO2\SQLEXPRESS;Initial Catalog=Myntra;Integrated Security=True;TrustServerCertificate=True;"
			 providerName="System.Data.SqlClient" />
	</connectionStrings>

/////  product cs code model 



namespace WebApplication1.Models
{
    using System;
    using System.Collections.Generic;

    public partial class Product
    {
        public int ProductId { get; set; }  // Use ProductId, make it public
        public string ProductName { get; set; }
        public Nullable<decimal> ProductPrice { get; set; }
        public string ProductDescription { get; set; }
        public string ProductImage { get; set; }
    }
}








